#version 450

struct DrawIndirectCommand {
    uint index_count;
    uint instance_count;
    uint first_index;
    uint base_vertex;
    uint first_instance;
};

layout(std430, set = 0, binding = 0) buffer DrawCommands {
    DrawIndirectCommand commands[];
};

layout(set = 0, binding = 1) readonly buffer InstanceInputBuffer {
    mat4 instance_input_matrices[];
};

layout(set = 0, binding = 2) buffer InstanceOutputBuffer {
    mat4 instance_output_matrices[];
};

layout(set = 0, binding = 3) uniform ModelAABB {
    vec4 aabb_min;
    vec4 aabb_max;
};

layout(set = 1, binding = 0) uniform Camera {
    mat4 camera_mat;
    vec4 cam_pos;
};

#define MAX_INSTANCES 256
layout(local_size_x = MAX_INSTANCES, local_size_y = 1, local_size_z = 1) in;

shared uint visible_instance_count[MAX_INSTANCES];

void main() {
    uint instance_index = gl_GlobalInvocationID.x;
    uint command_index = gl_GlobalInvocationID.y;

    // Early exit if thread instance_index exceeds command count
    if (command_index >= commands.length()) {
        return;
    }

    if (instance_index >= instance_input_matrices.length()) {
        return;
    }

    if (command_index == 0) {
        visible_instance_count[command_index] = 0;
    }
    // Make sure all threads see the same reset value
    barrier();

    // TODO cull instances here
    mat4 instance_mtx = instance_input_matrices[instance_index];
    vec4 clip_min = camera_mat * instance_mtx * vec4(aabb_min.xyz, 1.0); 
    vec3 v_clip_min = clip_min.xyz / clip_min.w;
    bool min_out = false;
    if (v_clip_min.x > 1.0 || v_clip_min.y > 1.0 || v_clip_min.z > 1.0) {
        min_out = true;
    } else if (v_clip_min.x < -1.0 || v_clip_min.y < -1.0 || v_clip_min.z < -1.0) {
        min_out = true;
    }
    
    vec4 clip_max = camera_mat * instance_mtx * vec4(aabb_max.xyz, 1.0);  
    vec3 v_clip_max = clip_max.xyz / clip_max.w;
    bool max_out = false;
    if (v_clip_max.x > 1.0 || v_clip_max.y > 1.0 || v_clip_max.z > 1.0) {
        max_out = true;
    } else if (v_clip_max.x < -1.0 || v_clip_max.y < -1.0 || v_clip_max.z < -1.0) {
        max_out = true;
    }
    
    if (min_out && max_out) {
        return;
    }

    uint idx = atomicAdd(visible_instance_count[command_index], 1);
    instance_output_matrices[idx] = instance_mtx;

    // Wait for all threads to finish writing to the output buffer
    barrier();

    // Write the instance count to the command buffer
    if (command_index == 0) {
        commands[command_index].instance_count = visible_instance_count[command_index];
    }
}
